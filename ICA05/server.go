package main
import (
	"github.com/go-martini/martini"
	"github.com/martini-contrib/render"
	"encoding/json"
	"time"
	"strconv"
	"net/http"
	"log"
	"io/ioutil"
	"strings"
)

type SiteData struct {
	Name string
	Description string
	Count string
	MapData string
	Sunrise string
	Sunset string
}

type AutoGenerated struct {
	Results struct {
		Sunrise string `json:"sunrise"`
		Sunset string `json:"sunset"`
		SolarNoon string `json:"solar_noon"`
		DayLength string `json:"day_length"`
		CivilTwilightBegin string `json:"civil_twilight_begin"`
		CivilTwilightEnd string `json:"civil_twilight_end"`
		NauticalTwilightBegin string `json:"nautical_twilight_begin"`
		NauticalTwilightEnd string `json:"nautical_twilight_end"`
		AstronomicalTwilightBegin string `json:"astronomical_twilight_begin"`
		AstronomicalTwilightEnd string `json:"astronomical_twilight_end"`
	} `json:"results"`
	Status string `json:"status"`
}

var count int = 0

func main() {

	m := martini.Classic()

	m.Use( render.Renderer(render.Options{
		IndentJSON: true, // so we can read it..
	}))

	m.Get("/", func(r render.Render, x *http.Request) {
		place := string(x.FormValue("place"))
		place = strings.Replace(place, " ", "+", -1)

		if len(place) <= 0 {place = "UIA+Kristiansand"}
		r.HTML(200, "index", SiteData{
			"Gruppe 6",
			"ICA05",
			strconv.Itoa(count),
			place,
			getSunrise(),
			getSunset(),
		})
	})




	m.Get("/getCount", func() string {
		print(count)
		return strconv.Itoa(count)
	})


	go countNumber()
	m.RunOnAddr(":8080")
	m.Run()

}

func getSunriseSunset() string{
	readApi, err := http.Get("https://api.sunrise-sunset.org/json?lat=58.159912&lng=8.018206")
	if err != nil {log.Fatal(err)}
	bytes, err := ioutil.ReadAll(readApi.Body)
	if err != nil {log.Fatal(err)}
	return string(bytes)
}

func getSunrise() string {
	req, err := http.NewRequest("GET", "https://api.sunrise-sunset.org/json?lat=58.159912&lng=8.018206", nil)
	if err != nil {
		log.Fatal("NewRequest: ", err)
		return string("ERROR")
	}

	client := &http.Client{}

	resp, err := client.Do(req)
	if err != nil {
		log.Fatal("Do: ", err)
		return string("ERROR")
	}
	defer resp.Body.Close()

	var record AutoGenerated

	if err := json.NewDecoder(resp.Body).Decode(&record); err != nil {
		log.Println(err)
	}

	return string(record.Results.Sunrise);
}

func getSunset() string {
	req, err := http.NewRequest("GET", "https://api.sunrise-sunset.org/json?lat=58.159912&lng=8.018206", nil)
	if err != nil {
		log.Fatal("NewRequest: ", err)
		return string("ERROR")
	}
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal("Do: ", err)
		return string("ERROR")
	}
	defer resp.Body.Close()

	var record AutoGenerated
	if err := json.NewDecoder(resp.Body).Decode(&record); err != nil {
		log.Println(err)
	}

	return string(record.Results.Sunset);
}

func countNumber()  {
	for true{
		count += 1
		time.Sleep(1 * time.Second)
	}


}
